### A Pluto.jl notebook ###
# v0.20.18

using Markdown
using InteractiveUtils

# ╔═╡ 8f900506-563a-4853-957a-54445b939f56
begin 
	using Pluto
	# using Plots
	# using Dates
	# using Observables
	using BenchmarkTools
	# using CSV
	# using DataFrames
	# using Downloads
	# using Statistics
	# using StructArrays
	# using Distributed
	# using SharedArrays
	# using Random
	# using SharedArrays
	# @everywhere using Random
	# @everywhere using SharedArrays
	#----------------------------------------------------------------------
	println("pkgversion(Pluto)          = ", pkgversion(Pluto))
	# println("pkgversion(Plots)         = ", pkgversion(Plots))
	# println("pkgversion(Dates)         = ", pkgversion(Dates))
	# println("pkgversion(Observables)   = ", pkgversion(Observables))
	println("pkgversion(BenchmarkTools) = ", pkgversion(BenchmarkTools))
	# println("pkgversion(CSV)           = ", pkgversion(CSV))
	# println("pkgversion(DataFrames)    = ", pkgversion(DataFrames))
	# println("pkgversion(Downloads)     = ", pkgversion(Downloads))
	# println("pkgversion(Statistics)    = ", pkgversion(Statistics))
	# println("pkgversion(StructArrays)  = ", pkgversion(StructArrays))
	# println("pkgversion(Distributed)   = ", pkgversion(Distributed))
	# println("pkgversion(Random)        = ", pkgversion(Random))
	# println("pkgversion(SharedArrays)  = ", pkgversion(SharedArrays))
	#----------------------------------------------------------------------
end # begin

# ╔═╡ d5af9760-8e39-11f0-174b-f110fef47b1d
md"
====================================================================================
#### DP&BP\_Ch06\_04\_Memoization Pattern
##### file: DP&BP\_Ch06\_04\_MemoizationPattern
##### code: Julia/Pluto (1.11.6/0.20.16) by PCM *** 2025/09/20 ***

===================================================================================
"


# ╔═╡ d02f2e3b-66c5-4318-992f-7cf0301f2a13
md"
---
##### 0. Introduction
By *memoization* we can gain computation speed when *intermediate* results can be obtained by being fetched from a storage instead of being computed a second time. 

In the memoization used here *intermediate* function values are stored in a Julian *dictionary*. As a paradigmatic example we demonstrate this effect with the tree recursive *Fibonacci* function. When necessary we deviate from Kwong's code. 
"

# ╔═╡ f715ff25-f95b-48ba-818f-eac225205dc0
md"
---
##### 1. Topics
"

# ╔═╡ b1a3a18b-0547-4d72-987d-97178296df04
md"
---
##### 2. Packages
"

# ╔═╡ 8d202a61-6593-4cbe-bc89-12746a462588
md"
---
##### 3. Code
###### 3.1 Introducing the Naive *Fibonacci* Function
(Kwong, 2020, p.247)

Here we define the *Fibonacci* function as a *generic* function.
"

# ╔═╡ 0850aafc-281f-4aba-ad70-9abd5a0890ef
fib0(n) =
		n < 3 ? 
			1 : 
			fib0(n-1) + fib0(n-2)

# ╔═╡ ac1fbc01-f332-430a-8e58-14d1cbdb5ec6
fib0(6)

# ╔═╡ d14b5ab5-5909-4aef-a50d-51971cb78755
@btime fib0(40)               # ~ (398 - 1026) msec; Kwong's measurement is 427 msec

# ╔═╡ 1f6daa82-a83d-44a0-8a1f-bca3b488655d
md"
---
###### 3.2 With *Trace* Information
(cf. Kwong, 2020, p.247)

Kwong presents a *call graph* of $fib(6)$ to demonstrate that $fib(4), fib(3), fib(2)$, and $fib(1)$ are repeated $2, 3, 5$, and $2$ times so that *memoization* could save computations by storing and fetching from a memory like a *dictionary* (Kwong, 2020, p.247).

We generate a similar call graph by *tracing* recursive function calls of function $fib1(n)$.
"

# ╔═╡ e89195bb-260b-4df7-b46f-d7beb003adac
function fib1(n::Int; depth::Int=0, trace=false)
	indent = repeat("   ", depth)
	if 	n ≤ 2 
		1 
	else
		if (trace !== false) 
			println(indent, "|---------------") 
			println(indent, "|-> n = $n")
		end # if
		fibn = 
			fib1(n-1, depth=depth+1, trace=trace) + 
				fib1(n-2, depth=depth+1, trace=trace)
		if (trace !== false) 
			println(indent, "|<- fib($n) = $fibn") 
			println(indent, "|===============")
		end # if
		fibn
	end # if
end # function fib1

# ╔═╡ 835ba716-1883-4af2-9059-e47946f50d22
fib1(6)

# ╔═╡ 37ce9c8f-943f-4293-aea8-58ae6df19d01
fib1(6, trace=true)

# ╔═╡ d2aad6d0-7fb1-48a3-879c-e1a52842ffad
fib1(10)

# ╔═╡ d5819122-4441-4a09-8e7b-0e107498bd67
fib1(10, trace=true)

# ╔═╡ ab4ffd37-300d-4516-ab9d-b78e9bfa1055
fib1.(1:10)

# ╔═╡ e0dcfa56-ff4f-4be2-a208-c5004d0a75aa
@btime fib1(40)          # ~ (37 - 68) sec, rather slow because of boilerplate code

# ╔═╡ 033ee2ed-4087-4158-9c81-dbce60c9b29e
md"
---
###### 3.2 Improving the Performance of the Fibonacci Function
(cf. Kwong, 2020, p.248f)

The bad performance of the naive Fibonacci function is documented by $fib2(n)$. We take as an example the computation of $fib(6)$. There a $15$ function calls as can be seen in Kwong's call graph (Kwong, 2020, p.247), the trace of $fib1(6)$ and the function value of $fib2(6)$.
"

# ╔═╡ 5940ffb0-d3ac-447a-96f8-a9230c95623c
function fib2(n)
	if 	n ≤ 2
		(n=n, result=1, counter=1)
	else
		(n2, result1, counter1) = fib2(n - 2)
		(n1, result2, counter2) = fib2(n - 1)
		(n = n, result  = result1 + result2, counter = 1 + counter1 + counter2)
	end # if
end # function fib2

# ╔═╡ 30711b63-3995-443d-ac81-09ab4c7b9062
fib2.(1:9)

# ╔═╡ 1f62f89e-809d-4f87-ae3a-83ddcecc5541
fib2(6)

# ╔═╡ 83a59aee-a440-4864-bcc7-d375b01b7dd3
fib2(10)

# ╔═╡ fc5be547-41cf-45f9-9763-809fe0fd3d23
@btime fib2(40)   
#         ~ (800 - 1800) msec; Kwong's measurement is 427 msec (Kwong, 2020, p.249)

# ╔═╡ 306f9699-365f-4989-9a3b-04794109f80b
md"
---
###### *First* attempt to use *Memoization*
(Kwong, 2020, p.249)

The question is whether *memoization* can help with a speed-up. This first attempt of memoization is implemented in $fib3(n)$. $fib3$ calls a parametric function $foo$. 

We tried the two argument bindings $fib0(n)$ and $\_fib$ for parameter $foo$. We measured a substantial speed gain by *memoization* implemented in $fib3(n)$ but no difference between arguments $fib0(n)$ and $\_fib(n)$.

The memoization effect is substantial although the number of entries in the dictionary is rather restricted. This is due to the effect that the dictionary entry is made only when the function is called the first time. This happens in the body of $fib3$. All other recursive calls located in the body of the called $fib0$ or $_fib$ are *not* affected by the memoization procedure. 

This way $fibCache$ only has 4 entries. These are for $fib3(5), fib3(6), fib3(10)$, and $fib3(40)$.
"

# ╔═╡ ebc321a9-1cfc-4fed-a6ef-908d007f55b5
begin 
	const fibCache = Dict()
	(length(fibCache), fibCache)            
end # begin

# ╔═╡ 1b0ecf34-868c-4c94-9dfa-d4a2f95e6a90
_fib(n) = 
	n ≤ 2 ? 
		1 : 
		fib0(n-1) + fib0(n-2)

# ╔═╡ 2cc5c1b2-1ffc-41c5-a15f-fbb6e65634f6
function fib3(n::Int; foo::Function=fib0)
	if 	haskey(fibCache, n)
		(length(fibCache), fibCache[n])
	else
		values = foo(n)             
		fibCache[n] = values 
		(length(fibCache), values)
	end # if
end # function

# ╔═╡ c1b6e7e7-e304-476a-96ad-f044342fb827
length(fibCache), fibCache                            # content of cache

# ╔═╡ d206e8e9-62f5-4456-a4ac-e800f1bf024f
@btime fib3(5)

# ╔═╡ 1ed5dc2c-deee-43cf-be52-9ab8f6676cc2
@btime fib3(6)

# ╔═╡ 535a1434-4850-486b-bf0c-6efb88f569c3
@btime fib3(10)

# ╔═╡ 801897c0-f358-451b-920d-2fb1522f05ed
@btime fib3(40, foo=fib0)         
#           ~ (44 - 68) nsec; Kwong's measurement is ~ 32 nsec (Kwong, 2020, p.249)

# ╔═╡ 1fd6389d-ac50-4e88-8352-b2d0fd2b4900
@btime fib3(40, foo=_fib) 
#           ~ (44 - 68) nsec; Kwong's measurement is ~ 32 nsec (Kwong, 2020, p.249)

# ╔═╡ dd1af5f1-db54-48a2-88eb-836030bbd3ca
length(fibCache), fibCache

# ╔═╡ 8e4c153f-cee6-4e6a-891a-ad40e47a4868
md"
---
###### 3.3 *Automating* the Construction of a *Memoization Cache* with *Multiple* and *Keyword* Arguments
(Kwong, 2020, p.250f)

The automation of the memoization effect can be obtained by the *higher-order* function $memoize(foo::Function)$. Function $memoize$ takes a functional argument and generates a new *memoized* function. For demonstration purposes we apply $memoize$ to $fib1(n), fib2(n)$ and $fib4$. The latter is a derivate of $fib1(n)$. $fib1(n)$ is a *generic* function but $fib4$ is not. It is bound to an *anonymous* function. Despite their different code implementations all Julia functions $fib1(n), fib2(n)$ and $fib4$ map *natural* numbers to the *Fibonacci* function values and their $memoize$-speed-gain is similar.
"

# ╔═╡ 44d98c72-2240-4bc0-8c70-40277d4821cd
fib4 =  
	(n::Int; depth::Int=0, trace=false) ->  #    anonymous function             
		if 	n ≤ 2 
			1 
		else
			indent = repeat("   ", depth)
			if (trace !== false) 
				println(indent, "|---------------")
				println(indent, "|-> n = $n")
			end # if
			fibn = 
				fib4(n-1, depth=depth+1, trace=trace) + 
					fib4(n-2, depth=depth+1, trace=trace)
			if (trace !== false) 
				println(indent, "|<- fib($n) = $fibn") 
				println(indent, "|===============")
			end # if
			fibn
		end # if

# ╔═╡ 2adb81cc-4480-4df6-8ca2-b2dbcbb8c23a
fib4(6)

# ╔═╡ ee4823f0-d250-4989-95b0-6e98eece4e49
fib4(6, trace=true)

# ╔═╡ 48865a0e-1cea-462e-b39d-e15cb3e7b29c
fib4(10)

# ╔═╡ b17ee736-b45c-462e-a290-ea675517066c
fib4(10, trace=true)

# ╔═╡ a76bfca3-7d26-4792-af86-494b43bf0bff
@btime fib4(40)          # ~ (24 - 68) sec, rather slow because of boilerplate code

# ╔═╡ bab903df-0686-4134-b7fb-299622393f6c
function memoize(foo::Function)
	cache = Dict()
	#-----------------------------------------------------------------------------
	x ->                                    # closure                           
		if 	haskey(cache, x)                # cache is nonlocal in closure   
			length(cache), cache[x]  
		else
			value = foo(x)                  # foo is nonlocal in closure 
			cache[x] = value
			length(cache), value   
		end # if
	#-----------------------------------------------------------------------------
end # function memoize

# ╔═╡ 2da8d149-d08b-466f-81a6-60c6297f5a3c
fib5 = memoize(fib1)

# ╔═╡ a5c0e0f9-f508-44a7-9bd6-c0cfb481200f
fib5.(1:9)

# ╔═╡ 45f79e48-edc6-4208-816c-76be9d928e03
fib5(10)

# ╔═╡ c1e307ea-5b81-4a8e-a328-729d7500ad70
@btime fib5(40)                 
#             ~ (72 - 87) nsec; Kwong's measurement is 47 nsec (Kwong, 2020, p.251)

# ╔═╡ 3a113fb9-1ce0-46d8-9ff8-ca780cfd2cbd
fib6 = memoize(fib4)

# ╔═╡ 01c903f6-0f90-42cd-9d7a-1d9263ebb565
fib6.(1:9)                             # ==> (length(cache), fib(n))

# ╔═╡ 47b62a5b-957e-44af-9ac7-a45368eea655
fib6(10)

# ╔═╡ 5bcf2738-9be7-4afc-bbcb-3d34b1c65a03
@btime fib6(40)                  
#             ~ (72 - 89) nsec; Kwong's measurement is 47 nsec (Kwong, 2020, p.251)

# ╔═╡ c1c3ce31-7b97-4708-8d13-63debcf9a1f6
fib7 = memoize(fib2)

# ╔═╡ 9304229d-c92a-4fca-8f38-f90b85bcbe3b
fib7.(1:9)

# ╔═╡ f22e4e21-bd81-4df8-9794-8342b9b247f8
fib7(10)

# ╔═╡ 5e2993fe-c272-4961-b3ab-0bc20bd7ff53
@btime fib7(40)                  
#             ~ (72 - 85) nsec; Kwong's measurement is 47 nsec (Kwong, 2020, p.251)

# ╔═╡ 14f4e767-4bd0-4c46-8cec-a8b60cb3eb43
md"
---
###### 3.4 Memoizing Recursive Functions
(cf. Kwong, 2020, p.252)

Memoization is done *top-down* for *each* recursive function call in an *anonymous* function by memoizing all recursive function calls in the *body* of a recursive function: $memoize(fib8)$ vs. $memoize(fib0)$. For our examples we could *not* measure any *speed-gain* when *memoizing* all recursive calls top down.
"

# ╔═╡ 54c97527-e3f9-40dc-9811-c55208672afc
fib8 = 
	n ->
		if 	n < 3 
			1  
		else
			memoize(fib8)(n-1)[2] + memoize(fib8)(n-2)[2] 
		end # if

# ╔═╡ deaeb9f2-1c85-4024-bebe-f22f636a318a
fib9 = memoize(fib8)   # memorizing the total memorized recursive function

# ╔═╡ 1112225e-b76f-4e50-acd7-409555325148
fib9(6)

# ╔═╡ 82a89ea1-9791-474f-82a1-f4f48c6a174f
fib9(10)

# ╔═╡ bc17ca91-becf-499b-8af7-0960955710f5
@btime fib9(40)                   # ~ (72 - 85) nsec

# ╔═╡ 64e3978a-7cec-41ea-8a98-d3fa7ec2d7c2
fib10 = memoize(fib0)   # memorizing the non total memorized recursive function

# ╔═╡ ed32a201-f49c-4c22-b124-21f1f8c87e98
fib10.(1:9)

# ╔═╡ 43bfd627-b5de-48ff-bbd5-6f6430d7118a
@btime fib10(10)                  # ~ (72 - 90) nsec

# ╔═╡ 19822291-fe58-4e4e-a68c-e578b07c6943
@btime fib10(20)                  # ~ (72 - 90) nsec

# ╔═╡ 005c5aee-7c02-4f8f-8d5d-9d4dc4cdf7de
@btime fib10(40)                  # ~ (72 - 90) nsec; Kwong's measurement is 47 nsec

# ╔═╡ 1e53ebac-3f3d-4965-bc9e-ee7e7dd93d80
@btime fib10(40)                  # ~ (72 - 90) nsec; Kwong's measurement is 47 nsec

# ╔═╡ 2098a943-05a3-4ba6-b21a-363342ee365e
md"
---
###### 3.5 Supporting Functions with *Multiple* Arguments
(Kwong, 2020, p.253f)
"

# ╔═╡ 89327b48-730e-4fab-aa38-14eac97c7ff9
function memoizeMultipleArgs(foo)
	cache = Dict()
	#-----------------------------------------------------------------------------
	(args...; kwargs...) -> 
		begin                                   # closure
			key = (args, kwargs)
			if 	haskey(cache, key)                # cache is nonlocal in closure   
				cache[key]  
			else
				value = foo(args...; kwargs...) # foo is nonlocal in closure 
				cache[key] = value
				value   
			end # if
		end # begin
	#-----------------------------------------------------------------------------
end # function memoizeMultipleArgs

# ╔═╡ f2fcf32a-8729-4777-b842-e35ddd9f24eb
fib11 = memoizeMultipleArgs(fib4)

# ╔═╡ b7aff350-5c93-4213-94b5-3c2673922583
fib11.(1:9)

# ╔═╡ f437d04b-d646-4ed6-8863-4f5e137575c1
fib11(10)

# ╔═╡ b664cd9f-79d6-448e-b3f3-41f83c7b25c7
fib11(10, trace=true)

# ╔═╡ 094f836e-2cbf-415f-9ab5-cb633763b235
@btime fib11(40)                 # ~ (28 - 32) nsec; Kwong's measurement is 47 nsec

# ╔═╡ 760afd47-d1f7-4ca7-91bb-a07074ea1dce
slowOp = (a, b = 2; c = 3, d) -> begin
	sleep(2)
	a + b + c + d
end # begin

# ╔═╡ 8e30f35c-e0a0-4cb0-bbbe-ce078d61033e
fastOp = memoizeMultipleArgs(slowOp)

# ╔═╡ 14673fa7-294c-4c86-96e8-e6ae96680efe
@btime fastOp(2, d=5)                  # ~ (67 - 78) nsec; Kwong's is 2.4 sec

# ╔═╡ 7378973e-3d2b-4b32-a9f9-195593c81d4e
@btime fastOp(2, d=5)                  # ~ (67 - 78) nsec; Kwong's is 23000 nsec

# ╔═╡ 33602290-b08f-4f9b-90a6-0746b03e6cf9
@btime fastOp(1, c=4, d=5)             # ~ (97 - 152) nsec; Kwong's is 21000 nsec

# ╔═╡ 8b037765-79d4-41df-933c-4963db9ec503
@btime fastOp(1, c=4, d=5)             # ~ (97 - 152) nsec; Kwong's is 21000 nsec

# ╔═╡ 897fdd0d-43ff-4b6d-b786-81416104dede
md"
---
###### 3.6 Mutable Data Types in the Arguments
(Kwong, 2020, p.254-257)
"

# ╔═╡ 20546bbc-c2a2-4034-b7e4-45367101f6b4
sumSlowAbs = (xs::AbstractVector{T} where {T <: Real}) -> begin
	sleep(2)
	sum(abs(x) for x in xs)
end # begin

# ╔═╡ e2e50b88-f31e-45b3-b146-744e68dd8716
xs2 = [1, -2,  3, -4,  5]                  # 1 + 2 + 3 + 4 + 5 = 15

# ╔═╡ 6a6a5f7f-8683-4f9c-8d3f-8ebc0ce299b9
xs2 |> x -> abs.(x) |> sum                 # ==> 15 -->  :)

# ╔═╡ 8eda3fde-54b7-40d3-b285-e4fe76b52cfe
@btime sumSlowAbs(xs2)                     #  ~ 2 sec

# ╔═╡ 30f4abd7-d187-4277-a7e5-19aaae957caa
sumFastAbs = memoizeMultipleArgs(sumSlowAbs)

# ╔═╡ 0f7abba3-336a-4742-95f7-cb8782651ed5
@btime sumFastAbs(xs2)                     # ~ (55 - 190) nsec; Kwong's is 22000 nsec

# ╔═╡ 0d1475bb-b700-44ec-a534-c0f431678d53
@btime sumFastAbs(xs2)                     # ~ (55 - 190) nsec; Kwong's is 8000 nsec

# ╔═╡ d5a1ecd7-a583-462b-b678-1fda936a2fd9
push!(xs2, -6)                             # 1 + 2 + 3 + 4 + 5 + 6 = 21

# ╔═╡ 362f12ac-8c42-48e8-a21f-dee43c53dc88
xs2

# ╔═╡ d24457c7-39fb-4d53-a08e-dbcf2fb2180d
xs2 |> x -> abs.(x) |> sum                 # ==> 21 -->  :)

# ╔═╡ e8cbe3d5-7f07-4e62-835c-a847de34c772
@btime sumFastAbs(xs2)                     # ~ (55 - 190) nsec; Kwong's is 8000 nsec

# ╔═╡ b06b3cd5-998a-449d-b8f9-b6174b6dd897
push!(xs2, 7)                              # 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28

# ╔═╡ 78013299-bece-4894-8988-d3eca308b8c5
xs2

# ╔═╡ 31656efc-07a6-4692-b818-b5c223792c5e
xs2 |> x -> abs.(x) |> sum

# ╔═╡ 3622dd53-579e-4a68-b868-bff8443096f6
@btime sumFastAbs(xs2)                     # ~ (55 - 110) nsec; Kwong's is 2 sec

# ╔═╡ 735138f0-424a-4c74-b274-4499e31c85a1
rand(UInt64)

# ╔═╡ 221c48b7-aca6-4412-bec3-4082ae3855fd
function memoizeMultipleArgsHash(foo)
	#-----------------------------------------------------------------------------
	function hashAllArgs(args, kwargs)
		# h =  rand(UInt64)
		h =  0xed98007bd4471dc2               # Kwong, 2020, p.256
		h += hash(args, h)
		h += hash(kwargs, h)
		h
	end # function
	#-----------------------------------------------------------------------------
	cache = Dict()
	#-----------------------------------------------------------------------------
	(args...; kwargs...) -> begin                                  # closure
		key = hashAllArgs(args, kwargs)
		if 	haskey(cache, key)                # cache is nonlocal in closure   
			cache[key]  
		else
			value = foo(args...; kwargs...)   # foo is nonlocal in closure 
			cache[key] = value
			value   
		end # if
	end # begin
	#-----------------------------------------------------------------------------
end # function memoizeMultipleArgsHash

# ╔═╡ cf775dcc-b3a3-4ae4-8608-348df7973908
sumAbsHash = memoizeMultipleArgsHash(sumSlowAbs)

# ╔═╡ 440a29ef-f4ad-4d35-a05e-c800e5b44f21
xs4 = [1, -2, 3, -4, 5]

# ╔═╡ d34c2b5f-ca7b-40c3-a297-4af927298242
xs4 |> x -> abs.(x) |> sum                      # ==>  15 -->  :)

# ╔═╡ 2424631b-a4e3-4a1e-b736-01284b8eca66
@btime sumAbsHash(xs4)                          # ~ 2 sec

# ╔═╡ 8adf9648-7a3b-4d85-a8d5-70623aacfccc
@btime sumAbsHash(xs4)                          # ~ 2 sec

# ╔═╡ 471ff02c-adf7-42a5-96f5-5bab0c771df7
for i in 6:10
	push!(xs4, i * (iseven(i) ? -1 : 1))
	ts = @elapsed val = sumAbsHash(xs4)
	println(i, ": ", xs4, " -> ", val, " ( ", round(ts, digits=1), "s)")
	ts = @elapsed val = sumAbsHash(xs4)
	println(i, ": ", xs4, " -> ", val, " ( ", round(ts, digits=1), "s)")
end # for

# ╔═╡ 2f3ad781-b1ec-4980-8a1d-41578d9ab5c9
md"
---
##### 4. Summary
Great success ! We could replicate Kwong's results.
"

# ╔═╡ b5e6c048-a54e-454c-859e-22f5d5539cf0
md"
---
#### 5. References

- **Kwong, T.**; *Hands On Design Patterns and Best Practices*, Birmingham, UK: Packt, 2020
- **Kwong, T.**; [*Hands On Design Patterns and Best Practices*](https://github.com/PacktPublishing/Hands-on-Design-Patterns-and-Best-Practices-with-Julia); last visit 2025/09/10

"

# ╔═╡ 09c3a92f-8775-4f09-94df-60f70507dbcd
md"
====================================================================================

This is a **draft** under the Attribution-NonCommercial-ShareAlike 4.0 International **(CC BY-NC-SA 4.0)** license. Comments, suggestions for improvement and bug reports are welcome: **claus.moebus(@)uol.de**

==================================================================================
"

# ╔═╡ 00000000-0000-0000-0000-000000000001
PLUTO_PROJECT_TOML_CONTENTS = """
[deps]
BenchmarkTools = "6e4b80f9-dd63-53aa-95a3-0cdb28fa8baf"
Pluto = "c3e4b0f8-55cb-11ea-2926-15256bba5781"

[compat]
BenchmarkTools = "~1.6.0"
Pluto = "~0.20.16"
"""

# ╔═╡ 00000000-0000-0000-0000-000000000002
PLUTO_MANIFEST_TOML_CONTENTS = """
# This file is machine-generated - editing it directly is not advised

julia_version = "1.11.7"
manifest_format = "2.0"
project_hash = "973689022f674754d792752b80f5822e88456a93"

[[deps.ArgTools]]
uuid = "0dad84c5-d112-42e6-8d28-ef12dabb789f"
version = "1.1.2"

[[deps.Artifacts]]
uuid = "56f22d72-fd6d-98f1-02f0-08ddc0907c33"
version = "1.11.0"

[[deps.Base64]]
uuid = "2a0f44e3-6c83-55bd-87e4-b1978d98bd5f"
version = "1.11.0"

[[deps.BenchmarkTools]]
deps = ["Compat", "JSON", "Logging", "Printf", "Profile", "Statistics", "UUIDs"]
git-tree-sha1 = "e38fbc49a620f5d0b660d7f543db1009fe0f8336"
uuid = "6e4b80f9-dd63-53aa-95a3-0cdb28fa8baf"
version = "1.6.0"

[[deps.BitFlags]]
git-tree-sha1 = "0691e34b3bb8be9307330f88d1a3c3f25466c24d"
uuid = "d1d4a3ce-64b1-5f1a-9ba4-7e7e69966f35"
version = "0.1.9"

[[deps.CodecZlib]]
deps = ["TranscodingStreams", "Zlib_jll"]
git-tree-sha1 = "962834c22b66e32aa10f7611c08c8ca4e20749a9"
uuid = "944b1d66-785c-5afd-91f1-9de20f533193"
version = "0.7.8"

[[deps.Compat]]
deps = ["TOML", "UUIDs"]
git-tree-sha1 = "0037835448781bb46feb39866934e243886d756a"
uuid = "34da2185-b29b-5c13-b0c7-acf172513d20"
version = "4.18.0"
weakdeps = ["Dates", "LinearAlgebra"]

    [deps.Compat.extensions]
    CompatLinearAlgebraExt = "LinearAlgebra"

[[deps.CompilerSupportLibraries_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "e66e0078-7015-5450-92f7-15fbd957f2ae"
version = "1.1.1+0"

[[deps.ConcurrentUtilities]]
deps = ["Serialization", "Sockets"]
git-tree-sha1 = "d9d26935a0bcffc87d2613ce14c527c99fc543fd"
uuid = "f0e56b4a-5159-44fe-b623-3e5288b988bb"
version = "2.5.0"

[[deps.Configurations]]
deps = ["ExproniconLite", "OrderedCollections", "TOML"]
git-tree-sha1 = "4358750bb58a3caefd5f37a4a0c5bfdbbf075252"
uuid = "5218b696-f38b-4ac9-8b61-a12ec717816d"
version = "0.17.6"

[[deps.DataAPI]]
git-tree-sha1 = "abe83f3a2f1b857aac70ef8b269080af17764bbe"
uuid = "9a962f9c-6df0-11e9-0e5d-c546b8b5ee8a"
version = "1.16.0"

[[deps.DataValueInterfaces]]
git-tree-sha1 = "bfc1187b79289637fa0ef6d4436ebdfe6905cbd6"
uuid = "e2d170a0-9d28-54be-80f0-106bbe20a464"
version = "1.0.0"

[[deps.Dates]]
deps = ["Printf"]
uuid = "ade2ca70-3891-5945-98fb-dc099432e06a"
version = "1.11.0"

[[deps.Distributed]]
deps = ["Random", "Serialization", "Sockets"]
uuid = "8ba89e20-285c-5b6f-9357-94700520ee1b"
version = "1.11.0"

[[deps.Downloads]]
deps = ["ArgTools", "FileWatching", "LibCURL", "NetworkOptions"]
uuid = "f43a241f-c20a-4ad4-852c-f6b1247861c6"
version = "1.6.0"

[[deps.ExceptionUnwrapping]]
deps = ["Test"]
git-tree-sha1 = "d36f682e590a83d63d1c7dbd287573764682d12a"
uuid = "460bff9d-24e4-43bc-9d9f-a8973cb893f4"
version = "0.1.11"

[[deps.ExpressionExplorer]]
git-tree-sha1 = "4a8c0a9eebf807ac42f0f6de758e60a20be25ffb"
uuid = "21656369-7473-754a-2065-74616d696c43"
version = "1.1.3"

[[deps.ExproniconLite]]
git-tree-sha1 = "c13f0b150373771b0fdc1713c97860f8df12e6c2"
uuid = "55351af7-c7e9-48d6-89ff-24e801d99491"
version = "0.10.14"

[[deps.FileWatching]]
uuid = "7b1f6079-737a-58dc-b8bc-7a2ca5c1b5ee"
version = "1.11.0"

[[deps.GracefulPkg]]
deps = ["Compat", "Pkg", "TOML"]
git-tree-sha1 = "698050b04f3cc0906d0817329d6e96484bf238eb"
uuid = "828d9ff0-206c-6161-646e-6576656f7244"
version = "2.3.0"

[[deps.HTTP]]
deps = ["Base64", "CodecZlib", "ConcurrentUtilities", "Dates", "ExceptionUnwrapping", "Logging", "LoggingExtras", "MbedTLS", "NetworkOptions", "OpenSSL", "PrecompileTools", "Random", "SimpleBufferStream", "Sockets", "URIs", "UUIDs"]
git-tree-sha1 = "ed5e9c58612c4e081aecdb6e1a479e18462e041e"
uuid = "cd3eb016-35fb-5094-929b-558a96fad6f3"
version = "1.10.17"

[[deps.HypertextLiteral]]
deps = ["Tricks"]
git-tree-sha1 = "7134810b1afce04bbc1045ca1985fbe81ce17653"
uuid = "ac1192a8-f4b3-4bfe-ba22-af5b92cd3ab2"
version = "0.9.5"

[[deps.InteractiveUtils]]
deps = ["Markdown"]
uuid = "b77e0a4c-d291-57a0-90e8-8db25a27a240"
version = "1.11.0"

[[deps.IteratorInterfaceExtensions]]
git-tree-sha1 = "a3f24677c21f5bbe9d2a714f95dcd58337fb2856"
uuid = "82899510-4779-5014-852e-03e436cf321d"
version = "1.0.0"

[[deps.JLLWrappers]]
deps = ["Artifacts", "Preferences"]
git-tree-sha1 = "0533e564aae234aff59ab625543145446d8b6ec2"
uuid = "692b3bcd-3c85-4b1f-b108-f13ce0eb3210"
version = "1.7.1"

[[deps.JSON]]
deps = ["Dates", "Mmap", "Parsers", "Unicode"]
git-tree-sha1 = "31e996f0a15c7b280ba9f76636b3ff9e2ae58c9a"
uuid = "682c06a0-de6a-54ab-a142-c8b1cf79cde6"
version = "0.21.4"

[[deps.LRUCache]]
git-tree-sha1 = "5519b95a490ff5fe629c4a7aa3b3dfc9160498b3"
uuid = "8ac3fa9e-de4c-5943-b1dc-09c6b5f20637"
version = "1.6.2"
weakdeps = ["Serialization"]

    [deps.LRUCache.extensions]
    SerializationExt = ["Serialization"]

[[deps.LazilyInitializedFields]]
git-tree-sha1 = "0f2da712350b020bc3957f269c9caad516383ee0"
uuid = "0e77f7df-68c5-4e49-93ce-4cd80f5598bf"
version = "1.3.0"

[[deps.LibCURL]]
deps = ["LibCURL_jll", "MozillaCACerts_jll"]
uuid = "b27032c2-a3e7-50c8-80cd-2d36dbcbfd21"
version = "0.6.4"

[[deps.LibCURL_jll]]
deps = ["Artifacts", "LibSSH2_jll", "Libdl", "MbedTLS_jll", "Zlib_jll", "nghttp2_jll"]
uuid = "deac9b47-8bc7-5906-a0fe-35ac56dc84c0"
version = "8.6.0+0"

[[deps.LibGit2]]
deps = ["Base64", "LibGit2_jll", "NetworkOptions", "Printf", "SHA"]
uuid = "76f85450-5226-5b5a-8eaa-529ad045b433"
version = "1.11.0"

[[deps.LibGit2_jll]]
deps = ["Artifacts", "LibSSH2_jll", "Libdl", "MbedTLS_jll"]
uuid = "e37daf67-58a4-590a-8e99-b0245dd2ffc5"
version = "1.7.2+0"

[[deps.LibSSH2_jll]]
deps = ["Artifacts", "Libdl", "MbedTLS_jll"]
uuid = "29816b5a-b9ab-546f-933c-edad1886dfa8"
version = "1.11.0+1"

[[deps.Libdl]]
uuid = "8f399da3-3557-5675-b5ff-fb832c97cbdb"
version = "1.11.0"

[[deps.LinearAlgebra]]
deps = ["Libdl", "OpenBLAS_jll", "libblastrampoline_jll"]
uuid = "37e2e46d-f89d-539d-b4ee-838fcccc9c8e"
version = "1.11.0"

[[deps.Logging]]
uuid = "56ddb016-857b-54e1-b83d-db4d58db5568"
version = "1.11.0"

[[deps.LoggingExtras]]
deps = ["Dates", "Logging"]
git-tree-sha1 = "f02b56007b064fbfddb4c9cd60161b6dd0f40df3"
uuid = "e6f89c97-d47a-5376-807f-9c37f3926c36"
version = "1.1.0"

[[deps.MIMEs]]
git-tree-sha1 = "c64d943587f7187e751162b3b84445bbbd79f691"
uuid = "6c6e2e6c-3030-632d-7369-2d6c69616d65"
version = "1.1.0"

[[deps.Malt]]
deps = ["Distributed", "Logging", "RelocatableFolders", "Serialization", "Sockets"]
git-tree-sha1 = "636abf4fb184be05888dacc0b636fe0911d6d746"
uuid = "36869731-bdee-424d-aa32-cab38c994e3b"
version = "1.2.0"

[[deps.Markdown]]
deps = ["Base64"]
uuid = "d6f4376e-aef5-505a-96c1-9c027394607a"
version = "1.11.0"

[[deps.MbedTLS]]
deps = ["Dates", "MbedTLS_jll", "MozillaCACerts_jll", "NetworkOptions", "Random", "Sockets"]
git-tree-sha1 = "c067a280ddc25f196b5e7df3877c6b226d390aaf"
uuid = "739be429-bea8-5141-9913-cc70e7f3736d"
version = "1.1.9"

[[deps.MbedTLS_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "c8ffd9c3-330d-5841-b78e-0817d7145fa1"
version = "2.28.6+0"

[[deps.Mmap]]
uuid = "a63ad114-7e13-5084-954f-fe012c677804"
version = "1.11.0"

[[deps.MozillaCACerts_jll]]
uuid = "14a3606d-f60d-562e-9121-12d972cd8159"
version = "2023.12.12"

[[deps.MsgPack]]
deps = ["Serialization"]
git-tree-sha1 = "f5db02ae992c260e4826fe78c942954b48e1d9c2"
uuid = "99f44e22-a591-53d1-9472-aa23ef4bd671"
version = "1.2.1"

[[deps.NetworkOptions]]
uuid = "ca575930-c2e3-43a9-ace4-1e988b2c1908"
version = "1.2.0"

[[deps.OpenBLAS_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "Libdl"]
uuid = "4536629a-c528-5b80-bd46-f80d51c5b363"
version = "0.3.27+1"

[[deps.OpenSSL]]
deps = ["BitFlags", "Dates", "MozillaCACerts_jll", "OpenSSL_jll", "Sockets"]
git-tree-sha1 = "f1a7e086c677df53e064e0fdd2c9d0b0833e3f6e"
uuid = "4d8831e6-92b7-49fb-bdf8-b643e874388c"
version = "1.5.0"

[[deps.OpenSSL_jll]]
deps = ["Artifacts", "JLLWrappers", "Libdl"]
git-tree-sha1 = "2ae7d4ddec2e13ad3bddf5c0796f7547cf682391"
uuid = "458c3c95-2e84-50aa-8efc-19380b2a3a95"
version = "3.5.2+0"

[[deps.OrderedCollections]]
git-tree-sha1 = "05868e21324cede2207c6f0f466b4bfef6d5e7ee"
uuid = "bac558e1-5e72-5ebc-8fee-abe8a469f55d"
version = "1.8.1"

[[deps.Parsers]]
deps = ["Dates", "PrecompileTools", "UUIDs"]
git-tree-sha1 = "7d2f8f21da5db6a806faf7b9b292296da42b2810"
uuid = "69de0a69-1ddd-5017-9359-2bf0b02dc9f0"
version = "2.8.3"

[[deps.Pkg]]
deps = ["Artifacts", "Dates", "Downloads", "FileWatching", "LibGit2", "Libdl", "Logging", "Markdown", "Printf", "Random", "SHA", "TOML", "Tar", "UUIDs", "p7zip_jll"]
uuid = "44cfe95a-1eb2-52ea-b672-e2afdf69b78f"
version = "1.11.0"
weakdeps = ["REPL"]

    [deps.Pkg.extensions]
    REPLExt = "REPL"

[[deps.Pluto]]
deps = ["Base64", "Configurations", "Dates", "Downloads", "ExpressionExplorer", "FileWatching", "GracefulPkg", "HTTP", "HypertextLiteral", "InteractiveUtils", "LRUCache", "Logging", "LoggingExtras", "MIMEs", "Malt", "Markdown", "MsgPack", "Pkg", "PlutoDependencyExplorer", "PrecompileSignatures", "PrecompileTools", "REPL", "RegistryInstances", "RelocatableFolders", "Scratch", "Sockets", "TOML", "Tables", "URIs", "UUIDs"]
git-tree-sha1 = "caa732c5e9b927aa778ed7fa0c0accce0d02fbfc"
uuid = "c3e4b0f8-55cb-11ea-2926-15256bba5781"
version = "0.20.16"

[[deps.PlutoDependencyExplorer]]
deps = ["ExpressionExplorer", "InteractiveUtils", "Markdown"]
git-tree-sha1 = "c3e5073a977b1c58b2d55c1ec187c3737e64e6af"
uuid = "72656b73-756c-7461-726b-72656b6b696b"
version = "1.2.2"

[[deps.PrecompileSignatures]]
git-tree-sha1 = "18ef344185f25ee9d51d80e179f8dad33dc48eb1"
uuid = "91cefc8d-f054-46dc-8f8c-26e11d7c5411"
version = "3.0.3"

[[deps.PrecompileTools]]
deps = ["Preferences"]
git-tree-sha1 = "5aa36f7049a63a1528fe8f7c3f2113413ffd4e1f"
uuid = "aea7be01-6a6a-4083-8856-8a6e6704d82a"
version = "1.2.1"

[[deps.Preferences]]
deps = ["TOML"]
git-tree-sha1 = "0f27480397253da18fe2c12a4ba4eb9eb208bf3d"
uuid = "21216c6a-2e73-6563-6e65-726566657250"
version = "1.5.0"

[[deps.Printf]]
deps = ["Unicode"]
uuid = "de0858da-6303-5e67-8744-51eddeeeb8d7"
version = "1.11.0"

[[deps.Profile]]
uuid = "9abbd945-dff8-562f-b5e8-e1ebf5ef1b79"
version = "1.11.0"

[[deps.REPL]]
deps = ["InteractiveUtils", "Markdown", "Sockets", "StyledStrings", "Unicode"]
uuid = "3fa0cd96-eef1-5676-8a61-b3b8758bbffb"
version = "1.11.0"

[[deps.Random]]
deps = ["SHA"]
uuid = "9a3f8284-a2c9-5f02-9a11-845980a1fd5c"
version = "1.11.0"

[[deps.RegistryInstances]]
deps = ["LazilyInitializedFields", "Pkg", "TOML", "Tar"]
git-tree-sha1 = "ffd19052caf598b8653b99404058fce14828be51"
uuid = "2792f1a3-b283-48e8-9a74-f99dce5104f3"
version = "0.1.0"

[[deps.RelocatableFolders]]
deps = ["SHA", "Scratch"]
git-tree-sha1 = "ffdaf70d81cf6ff22c2b6e733c900c3321cab864"
uuid = "05181044-ff0b-4ac5-8273-598c1e38db00"
version = "1.0.1"

[[deps.SHA]]
uuid = "ea8e919c-243c-51af-8825-aaa63cd721ce"
version = "0.7.0"

[[deps.Scratch]]
deps = ["Dates"]
git-tree-sha1 = "9b81b8393e50b7d4e6d0a9f14e192294d3b7c109"
uuid = "6c6a2e73-6563-6170-7368-637461726353"
version = "1.3.0"

[[deps.Serialization]]
uuid = "9e88b42a-f829-5b0c-bbe9-9e923198166b"
version = "1.11.0"

[[deps.SimpleBufferStream]]
git-tree-sha1 = "f305871d2f381d21527c770d4788c06c097c9bc1"
uuid = "777ac1f9-54b0-4bf8-805c-2214025038e7"
version = "1.2.0"

[[deps.Sockets]]
uuid = "6462fe0b-24de-5631-8697-dd941f90decc"
version = "1.11.0"

[[deps.Statistics]]
deps = ["LinearAlgebra"]
git-tree-sha1 = "ae3bb1eb3bba077cd276bc5cfc337cc65c3075c0"
uuid = "10745b16-79ce-11e8-11f9-7d13ad32a3b2"
version = "1.11.1"

    [deps.Statistics.extensions]
    SparseArraysExt = ["SparseArrays"]

    [deps.Statistics.weakdeps]
    SparseArrays = "2f01184e-e22b-5df5-ae63-d93ebab69eaf"

[[deps.StyledStrings]]
uuid = "f489334b-da3d-4c2e-b8f0-e476e12c162b"
version = "1.11.0"

[[deps.TOML]]
deps = ["Dates"]
uuid = "fa267f1f-6049-4f14-aa54-33bafae1ed76"
version = "1.0.3"

[[deps.TableTraits]]
deps = ["IteratorInterfaceExtensions"]
git-tree-sha1 = "c06b2f539df1c6efa794486abfb6ed2022561a39"
uuid = "3783bdb8-4a98-5b6b-af9a-565f29a5fe9c"
version = "1.0.1"

[[deps.Tables]]
deps = ["DataAPI", "DataValueInterfaces", "IteratorInterfaceExtensions", "OrderedCollections", "TableTraits"]
git-tree-sha1 = "f2c1efbc8f3a609aadf318094f8fc5204bdaf344"
uuid = "bd369af6-aec1-5ad0-b16a-f7cc5008161c"
version = "1.12.1"

[[deps.Tar]]
deps = ["ArgTools", "SHA"]
uuid = "a4e569a6-e804-4fa4-b0f3-eef7a1d5b13e"
version = "1.10.0"

[[deps.Test]]
deps = ["InteractiveUtils", "Logging", "Random", "Serialization"]
uuid = "8dfed614-e22c-5e08-85e1-65c5234f0b40"
version = "1.11.0"

[[deps.TranscodingStreams]]
git-tree-sha1 = "0c45878dcfdcfa8480052b6ab162cdd138781742"
uuid = "3bb67fe8-82b1-5028-8e26-92a6c54297fa"
version = "0.11.3"

[[deps.Tricks]]
git-tree-sha1 = "372b90fe551c019541fafc6ff034199dc19c8436"
uuid = "410a4b4d-49e4-4fbc-ab6d-cb71b17b3775"
version = "0.1.12"

[[deps.URIs]]
git-tree-sha1 = "bef26fb046d031353ef97a82e3fdb6afe7f21b1a"
uuid = "5c2747f8-b7ea-4ff2-ba2e-563bfd36b1d4"
version = "1.6.1"

[[deps.UUIDs]]
deps = ["Random", "SHA"]
uuid = "cf7118a7-6976-5b1a-9a39-7adc72f591a4"
version = "1.11.0"

[[deps.Unicode]]
uuid = "4ec0a83e-493e-50e2-b9ac-8f72acf5a8f5"
version = "1.11.0"

[[deps.Zlib_jll]]
deps = ["Libdl"]
uuid = "83775a58-1f1d-513f-b197-d71354ab007a"
version = "1.2.13+1"

[[deps.libblastrampoline_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "8e850b90-86db-534c-a0d3-1478176c7d93"
version = "5.11.0+0"

[[deps.nghttp2_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "8e850ede-7688-5339-a07c-302acd2aaf8d"
version = "1.59.0+0"

[[deps.p7zip_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "3f19e933-33d8-53b3-aaab-bd5110c3b7a0"
version = "17.4.0+2"
"""

# ╔═╡ Cell order:
# ╟─d5af9760-8e39-11f0-174b-f110fef47b1d
# ╟─d02f2e3b-66c5-4318-992f-7cf0301f2a13
# ╟─f715ff25-f95b-48ba-818f-eac225205dc0
# ╟─b1a3a18b-0547-4d72-987d-97178296df04
# ╠═8f900506-563a-4853-957a-54445b939f56
# ╟─8d202a61-6593-4cbe-bc89-12746a462588
# ╠═0850aafc-281f-4aba-ad70-9abd5a0890ef
# ╠═ac1fbc01-f332-430a-8e58-14d1cbdb5ec6
# ╠═d14b5ab5-5909-4aef-a50d-51971cb78755
# ╟─1f6daa82-a83d-44a0-8a1f-bca3b488655d
# ╠═e89195bb-260b-4df7-b46f-d7beb003adac
# ╠═835ba716-1883-4af2-9059-e47946f50d22
# ╠═37ce9c8f-943f-4293-aea8-58ae6df19d01
# ╠═d2aad6d0-7fb1-48a3-879c-e1a52842ffad
# ╠═d5819122-4441-4a09-8e7b-0e107498bd67
# ╠═ab4ffd37-300d-4516-ab9d-b78e9bfa1055
# ╠═e0dcfa56-ff4f-4be2-a208-c5004d0a75aa
# ╟─033ee2ed-4087-4158-9c81-dbce60c9b29e
# ╠═5940ffb0-d3ac-447a-96f8-a9230c95623c
# ╠═30711b63-3995-443d-ac81-09ab4c7b9062
# ╠═1f62f89e-809d-4f87-ae3a-83ddcecc5541
# ╠═83a59aee-a440-4864-bcc7-d375b01b7dd3
# ╠═fc5be547-41cf-45f9-9763-809fe0fd3d23
# ╟─306f9699-365f-4989-9a3b-04794109f80b
# ╠═ebc321a9-1cfc-4fed-a6ef-908d007f55b5
# ╠═1b0ecf34-868c-4c94-9dfa-d4a2f95e6a90
# ╠═2cc5c1b2-1ffc-41c5-a15f-fbb6e65634f6
# ╠═c1b6e7e7-e304-476a-96ad-f044342fb827
# ╠═d206e8e9-62f5-4456-a4ac-e800f1bf024f
# ╠═1ed5dc2c-deee-43cf-be52-9ab8f6676cc2
# ╠═535a1434-4850-486b-bf0c-6efb88f569c3
# ╠═801897c0-f358-451b-920d-2fb1522f05ed
# ╠═1fd6389d-ac50-4e88-8352-b2d0fd2b4900
# ╠═dd1af5f1-db54-48a2-88eb-836030bbd3ca
# ╟─8e4c153f-cee6-4e6a-891a-ad40e47a4868
# ╠═44d98c72-2240-4bc0-8c70-40277d4821cd
# ╠═2adb81cc-4480-4df6-8ca2-b2dbcbb8c23a
# ╠═ee4823f0-d250-4989-95b0-6e98eece4e49
# ╠═48865a0e-1cea-462e-b39d-e15cb3e7b29c
# ╠═b17ee736-b45c-462e-a290-ea675517066c
# ╠═a76bfca3-7d26-4792-af86-494b43bf0bff
# ╠═bab903df-0686-4134-b7fb-299622393f6c
# ╠═2da8d149-d08b-466f-81a6-60c6297f5a3c
# ╠═a5c0e0f9-f508-44a7-9bd6-c0cfb481200f
# ╠═45f79e48-edc6-4208-816c-76be9d928e03
# ╠═c1e307ea-5b81-4a8e-a328-729d7500ad70
# ╠═3a113fb9-1ce0-46d8-9ff8-ca780cfd2cbd
# ╠═01c903f6-0f90-42cd-9d7a-1d9263ebb565
# ╠═47b62a5b-957e-44af-9ac7-a45368eea655
# ╠═5bcf2738-9be7-4afc-bbcb-3d34b1c65a03
# ╠═c1c3ce31-7b97-4708-8d13-63debcf9a1f6
# ╠═9304229d-c92a-4fca-8f38-f90b85bcbe3b
# ╠═f22e4e21-bd81-4df8-9794-8342b9b247f8
# ╠═5e2993fe-c272-4961-b3ab-0bc20bd7ff53
# ╟─14f4e767-4bd0-4c46-8cec-a8b60cb3eb43
# ╠═54c97527-e3f9-40dc-9811-c55208672afc
# ╠═deaeb9f2-1c85-4024-bebe-f22f636a318a
# ╠═1112225e-b76f-4e50-acd7-409555325148
# ╠═82a89ea1-9791-474f-82a1-f4f48c6a174f
# ╠═bc17ca91-becf-499b-8af7-0960955710f5
# ╠═64e3978a-7cec-41ea-8a98-d3fa7ec2d7c2
# ╠═ed32a201-f49c-4c22-b124-21f1f8c87e98
# ╠═43bfd627-b5de-48ff-bbd5-6f6430d7118a
# ╠═19822291-fe58-4e4e-a68c-e578b07c6943
# ╠═005c5aee-7c02-4f8f-8d5d-9d4dc4cdf7de
# ╠═1e53ebac-3f3d-4965-bc9e-ee7e7dd93d80
# ╟─2098a943-05a3-4ba6-b21a-363342ee365e
# ╠═89327b48-730e-4fab-aa38-14eac97c7ff9
# ╠═f2fcf32a-8729-4777-b842-e35ddd9f24eb
# ╠═b7aff350-5c93-4213-94b5-3c2673922583
# ╠═f437d04b-d646-4ed6-8863-4f5e137575c1
# ╠═b664cd9f-79d6-448e-b3f3-41f83c7b25c7
# ╠═094f836e-2cbf-415f-9ab5-cb633763b235
# ╠═760afd47-d1f7-4ca7-91bb-a07074ea1dce
# ╠═8e30f35c-e0a0-4cb0-bbbe-ce078d61033e
# ╠═14673fa7-294c-4c86-96e8-e6ae96680efe
# ╠═7378973e-3d2b-4b32-a9f9-195593c81d4e
# ╠═33602290-b08f-4f9b-90a6-0746b03e6cf9
# ╠═8b037765-79d4-41df-933c-4963db9ec503
# ╟─897fdd0d-43ff-4b6d-b786-81416104dede
# ╠═20546bbc-c2a2-4034-b7e4-45367101f6b4
# ╠═e2e50b88-f31e-45b3-b146-744e68dd8716
# ╠═6a6a5f7f-8683-4f9c-8d3f-8ebc0ce299b9
# ╠═8eda3fde-54b7-40d3-b285-e4fe76b52cfe
# ╠═30f4abd7-d187-4277-a7e5-19aaae957caa
# ╠═0f7abba3-336a-4742-95f7-cb8782651ed5
# ╠═0d1475bb-b700-44ec-a534-c0f431678d53
# ╠═d5a1ecd7-a583-462b-b678-1fda936a2fd9
# ╠═362f12ac-8c42-48e8-a21f-dee43c53dc88
# ╠═d24457c7-39fb-4d53-a08e-dbcf2fb2180d
# ╠═e8cbe3d5-7f07-4e62-835c-a847de34c772
# ╠═b06b3cd5-998a-449d-b8f9-b6174b6dd897
# ╠═78013299-bece-4894-8988-d3eca308b8c5
# ╠═31656efc-07a6-4692-b818-b5c223792c5e
# ╠═3622dd53-579e-4a68-b868-bff8443096f6
# ╠═735138f0-424a-4c74-b274-4499e31c85a1
# ╠═221c48b7-aca6-4412-bec3-4082ae3855fd
# ╠═cf775dcc-b3a3-4ae4-8608-348df7973908
# ╠═440a29ef-f4ad-4d35-a05e-c800e5b44f21
# ╠═d34c2b5f-ca7b-40c3-a297-4af927298242
# ╠═2424631b-a4e3-4a1e-b736-01284b8eca66
# ╠═8adf9648-7a3b-4d85-a8d5-70623aacfccc
# ╠═471ff02c-adf7-42a5-96f5-5bab0c771df7
# ╟─2f3ad781-b1ec-4980-8a1d-41578d9ab5c9
# ╟─b5e6c048-a54e-454c-859e-22f5d5539cf0
# ╟─09c3a92f-8775-4f09-94df-60f70507dbcd
# ╟─00000000-0000-0000-0000-000000000001
# ╟─00000000-0000-0000-0000-000000000002
